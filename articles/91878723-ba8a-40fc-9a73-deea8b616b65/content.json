{
	"id":"91878723-ba8a-40fc-9a73-deea8b616b65",
	"tag":"algorithm",
	"title": "人民币大写转换数字金额",
	"author": "YZQ",
	"time": "2017-11-26 18:30",
	"content": [
        {
            "tag": "p",
            "class": "type-p-a",
            "text": "人民币大写金额分为数字和单位两种汉字类型，“零壹贰叁肆伍陆柒捌玖”分别代表数字“0123456789”，“分角拾佰仟万亿”分别代表“0.01 0.1 10 100 1000 100000000”，除此之外还有一些汉字具有补充含义，比如“元”，“整”，“正”，但是这些汉字并不具有实际的计算能力，在计算前可以直接忽略。中文大写金额数字前应标明“人民币”字样，大写金额数字应紧接“人民币”字样填写，“人民币”字样声明了金额类型，在金额转换之前应该去除该字样。"
        },{
            "tag": "p",
            "class": "type-p-a",
            "text": "人民币大写金额具有一定规律，我们首先分析人民币的组成规则。人民币大写金额从左往右与数字金额相对应，一般情况下，数字汉字和单位汉字构成一位真正的数字，比如“壹拾”代表数字10；如果数字的单位属于“个”，那么单位“个”省略不写，虽然“个”具有单位的性质，却因人们长期的习惯而被省略了。数字“零”在人民币中不仅仅代表数字0，它还具有省略的功能，比如“壹仟零壹”中的“零”代表了0*100和0*10。数字“亿”比较特殊，因为在人民币大写中它属于最大的单位，一般情况下，人民币大写允许两位单位汉字连续，比如“壹拾万”，值得注意的是，前一个单位必须小于后一个单位，数字“壹拾万”中的“拾”必须小于“万”，而“壹万万”的表示是错误的，应该写成“壹亿”。注：“壹亿亿”是允许的，因为单位“亿”已经达到最大，所以“亿亿”只能这样表示了，然而生活中基本碰不到“亿亿”的数量级。"
        }, {
            "tag": "p",
            "class": "type-p-a",
            "text": "人民币大写最大的特点就是数量级跃升。同样的一段数字和单位，遇到不同的“基础单位”，他们代表的意义是不同的。比如数字“1230123”对应人民币“壹佰贰拾叁万零壹佰贰拾叁”，这里“壹佰贰拾叁”的“基础单位”存在“万”和“个”，因而其分别代表了壹佰贰拾叁万和壹佰贰拾叁。所谓“基础单位”是指“个”，“万”，“亿”等10000的倍数，根据人民的习惯，如果金额达到了万的数量级就用XXX万表示，如果金额达到了亿的数量级就用XXX亿来表示，这样的表示方法能够直观的看出金额的最大量级（基础单位），而一般情况下默认省略的基础单位是“个”。如果能把握基础单位在数字计算中的作用，我们就能解析人民币大写金额，并实现转化过程。"
        }, {
            "tag": "p",
            "class": "type-p-a",
            "text": "由于人民币存在很多非数字非单位意义的汉字，同时又省略了很多有计算意义的汉字，所以我们在真正转换前需要一些特殊处理（preWork）。这些处理不仅能够使人民币金额变得简洁完整，而且为了方便数字的顺序解析，我们还需要将人民币字符翻转，从左到右单位变为从小到大（同一个基础单位）。对于“个玖拾捌佰柒仟陆万零伍拾肆佰叁仟贰亿壹”的预处理："
        }, {
            "tag": "img",
            "class": "type-img-a",
            "src": "5e639740-cd30-4dd7-b5e8-abf5d34ae78d.jpg",
            "alt": "YZQ",
            "text": ""
        }, {
            "tag": "p",
            "class": "type-p-a",
            "text": "清除无意义字符"
        },  {
            "tag": "img",
            "class": "type-img-a",
            "src": "f66dbca4-2a88-4404-bfa1-c4906b3573c7.jpg",
            "alt": "YZQ",
            "text": ""
        }, {
            "tag": "p",
            "class": "type-p-a",
            "text": "翻转"
        },   {
            "tag": "img",
            "class": "type-img-a",
            "src": "f9b8b371-4ad7-4215-be05-c3c3dcbbf247.jpg",
            "alt": "YZQ",
            "text": ""
        }, {
            "tag": "p",
            "class": "type-p-a",
            "text": "补充单位（基础单位）“个”"
        }, {
            "tag": "img",
            "class": "type-img-a",
            "src": "25c679c6-4510-4479-b3a5-394196362a15.jpg",
            "alt": "YZQ",
            "text": ""
        }, {
            "tag": "p",
            "class": "type-p-a",
            "text": "顺序解析，遇到基础单位“万”，判断后面的汉字是否为也是单位，如果是则补充数字“零”，否则继续顺序解析"
        },  {
            "tag": "img",
            "class": "type-img-a",
            "src": "a4036893-3150-4743-b7fa-77ef7ab85c46.jpg",
            "alt": "QYZQ",
            "text": ""
        }, {
            "tag": "img",
            "class": "type-img-a",
            "src": "86bf20ce-7337-4640-a8cd-e06019c425b2.jpg",
            "alt": "QYZQ",
            "text": ""
        },{
            "tag": "p",
            "class": "type-p-a",
            "text": "顺序解析，遇到基础单位“亿”，后面的字符是数字，顺序解析并结束"
        },  {
            "tag":"p",
            "class":"type-p-a",
            "text":"金额字符经过预处理极大简化了转换的过程，转换比较简单，从左到右顺序遍历字符串，每次截取出“单位”+“数字”的汉字块并计算数值，最关键的一点就是不能忘记附加基础单位，这是控制金额数量级的重要参数。"
        }, {
            "tag":"p",
            "class":"type-p-a",
            "text":"解析过程同样非常简单，将金额数字单位定义在数组中，汉字金额后面是对应的数字，汉字单位后面对应的是数字单位，每次解析的过程：寻找匹配的汉字类型，如果找到该汉字，返回汉字后面的数字，如果没有找到该汉字，则返回异常（-1）。"
        }, {
            "tag":"p",
            "class":"type-p-a",
            "text":"计算过程最为简单，每部分计算的结果=数字*单位*基础单位，其中如果发生解析错误，则返回异常（-1）。"
        }, {
            "tag":"p",
            "class":"type-p-a",
            "text":"JS引用方法：var result = run(paramter); // paramter为人民币大写金额"
        },{
            "tag":"a",
            "class":"type-a-a",
            "href":"https://zequnyu9503.github.io/blog/js/moneyconverter.js",
            "download":"moneyconverter.js",
            "text":"moneyconverter.js 点此下载"
        }, {
            "tag": "p",
            "class": "type-p-b",
            "text": "备注：本项目开源"
        }
    ]            
}